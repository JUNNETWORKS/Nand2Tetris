// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution  // i xx a cccccc ddd jjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=notI);  // Not(i)

    // A Register
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inputA);
    Or(a=instruction[5], b=notI, out=loadA);
    ARegister(in=inputA, load=loadA, out=dataA, out[0..14]=addressM);

    // D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=inputX);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // A or Memory[A]
    Mux16(a=dataA, b=inM, sel=instruction[12], out=inputY);

    // ALU
    ALU(x=inputX, y=inputY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=outZr, ng=outNg);

    // Program Counter
    Not(in=outNg, out=notNg);
    Not(in=outZr, out=notZr);
    And(a=notNg, b=notZr, out=outPs);  // outPositive
    Mux(a=false, b=outNg, sel=instruction[2], out=j1Out);  // j1  (outALU < 0)
    Mux(a=false, b=outZr, sel=instruction[1], out=j2Out);  // j2  (outALU = 0)
    Mux(a=false, b=outPs, sel=instruction[0], out=j3Out);  // j3  (outALU > 0)
    Or(a=j1Out, b=j2Out, out=orOut1);
    Or(a=orOut1, b=j3Out, out=orOut2);
    And(a=instruction[15], b=orOut2, out=jmpFlag);
    Mux(a=jmpFlag, b=true, sel=reset, out=loadPC);  // reset=1 の時は PC の load は常に 1
    PC(in=dataA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}